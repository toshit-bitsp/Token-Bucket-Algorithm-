package com.company;
import java.util.ArrayList;
import java.util.Queue;
import java.util.Scanner;

class Bucket{
    public int tokens, maxsize;
    Bucket(int max){
        tokens = 0;
        maxsize = max;
    }
    //Add tokens in the bucket using the assistance of the AddTokenThread in regular time intervals
    void addToken() {
        if (tokens >= maxsize)
            return;
        else {
            tokens +=1;
            System.out.println("Added a token. Total:" + tokens);
        }
    }
    //SendPacket in the bucket using the assistance of the AddPacketThread in irregular time intervals
    //depending on packet demand as generated by Math.random() function
    int sendPacket(int n){
        System.out.println("No. of packet " + n);
        if(n > tokens){
//            System.out.println("Packet size larger than number of tokens.All the available "+tokens+" tokens spent "+
//                    (n-tokens)+" packets remain held");
            System.out.println(tokens+"packets spent "+(n-tokens)+" packets held");
            int s= n-tokens;
            tokens=0;
            return s;
        }
        else{
            tokens -= n;
            System.out.println("Packet sent and the required tokens consumed");
            return 0;
        }
    }
}

class AddTokenThread extends Thread{
    Bucket b;
    AddTokenThread(Bucket b){
        this.b = b;
    }
    public void run(){
        while(true){
            b.addToken();
            try{
                Thread.sleep(300);
                //Time between addition of two tokens
                //We tried number of sleep times but 300ms came out to be best option
                //We also tried giving user control over the token rate but it resulted in either program
                // becoming too fast for user to see anything or in some cases too slow so finally
                // we got it fixed to 300ms
            } catch(Exception e){
                System.out.println(e);
            }
        }
    }
}

class SendPacketThread extends Thread{
    Bucket b;
    SendPacketThread(Bucket b){
        this.b = b;
    }
    public void run(){
        while(true){
            try{
                Thread.sleep(300 + (int) (Math.random()*2000));
                //Time given to bucken to fill up a bit before first request comes around
            }
            catch(Exception e){}
            int j=1 + (int) (Math.random()* (b.maxsize-1));
            int i=b.sendPacket(j);
            if(i!=0){
                try{
                    if(i<10) {
                        Thread.sleep(300 * (i));
                    }
                        //A minor problem was occuring in this part that when we were using capacities greater
                        //than 10 in which after the break it would fill up to one less than reqd thus leading
                        //to a problem
                        //SO we used an if else block to bifurcate the case in 2 parts
                    else{
                        Thread.sleep(300*(i+1));
                    }
                }  catch (Exception e){
                    System.out.println(e);
                }
                b.sendPacket(i);
            }
        }
    }
}
//AddTokenThread and AddPacketThread use the concept of multithreading to implement the
// addToken and sendPacket method of the Bucket Class
public class Main {

    public static void main(String[] args) {
        // write your code here
        Scanner sc = new Scanner(System.in);
        int i=0;
        while(true) {
            System.out.println("Enter the max bucket capacity > 0");
            i=sc.nextInt();
            if(i>0){
                break;
            }
        }
        //Adding the max bucket capacity
        Bucket b = new Bucket(i);
        //Threads started
        Thread tokens = new AddTokenThread(b);
        Thread packets = new SendPacketThread(b);
        try{
            tokens.start();
            packets.start();
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
}
